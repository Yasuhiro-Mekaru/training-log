1. SessionとCookieについて

前提: HTTPはステートレスなプロトコルなので状態を保持しない。
　　　状態を保持しないとは、リクエスト・レスポンスが終わった後、サーバーはクライアントの情報を保持しないこと。
　　　クライアントからサーバーへリクエストした際の情報は全て無くなるので、再度リクエストする時、また情報を渡してあげなければならない。
　　　この状態の場合、ページ遷移をする場合やログインしてサイトを使用するような場合に、ページ遷移毎にユーザー情報を引き渡してあげなければならずセキュリティー的に良くない。
　　　このHTTPのステートレスな状態をステートフルな状態にするための技術がSessionやCookie。


webサイトにログインできる仕組み
1. クライアントからサーバーへリクエストが送られる。
2. クライアントがアプリでログインする。
3. サーバーはクライアントのsessionIDを作成する。
4. サーバーからクライアントへレスポンスを送る際、3で作成したsessionIDを送る。
5. クライアントはサーバーから受け取ったsessionIDをサーバー情報と共にCookieとしてブラウザに保存する。
6. クライアントは再度サーバーへリクエストを送る時、5で作成したCookie情報も送る。
7. サーバーはクライアントから受け取ったCookie情報からsessionIDを取り出し、ユーザー情報を復元する。

Cookie: サーバーから送られて来たsessionIDとサーバー情報
Session: クライアント・サーバー間でやりとりされる一連の動作

HTTPのステートレスな性質を克服するために生まれた仕組みがCookieやSession




2. Gitの使い方

新しくブランチを作成する
$ git checkout -b <branch name>


ブランチを変更する
$git branch <branch name>
変更する前にファイル類は閉じておく → 変更後のブランチで保存したら反映されてしまう
Staging Areaに変更が残っているとブランチの変更はできない


現在のブランチを確認する
$ git branch
* dev_ver1
  master
*がついているのが現在作業中のブランチ


repositoryの状態を確認する
$ git status


repositoryの変更をStaging Areaにあげる
$ git add <file name>
<file name>の箇所を .「ドット」で指定するとカレントディレクトリ配下全てを指定できる


Staging Areaの変更ぶんをコミットする
$ git commit -m 'comment'
コミットする際は必ず -mオプションでコメントをつけなければならない


logを確認する
$ git log
logファイル表示状態から戻るときは Q をクリック

remote repositoryを確認する
$ git remote -v


remote repositoryにpushする
$ git push <repository name> <branch name>
repository nameは省略することも可能 → だいたいorigin








3. docker-composeの使い方

docker-compose.ymlサンプル

version: '3'

services: 

  flask:
    build: ./flask
    container_name: flask
    command: flask run -h 0.0.0.0 -p 5000
    volumes:
      - ./flask:/work/
    ports:
      - 5000:5000
    links:
      - database
    # tty: true

  database:
    build: ./mysql
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: test_training_log
      MYSQL_USER: admin
      MYSQL_PASSWORD: password
      TZ: 'Asia/Tokyo'
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_bin
    volumes:
      - ./mysql/data:/var/lib/mysql
      - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf
      - ./mysql/sql:/docker-entrypoint-initdb.d
      - ./mysql/log:/var/log/mysql
    ports:
      - 3306:3306

書き方
yamlファイルの書き方に準ずる。
データはkey,value方式で、jsonのような入れ子構造で保管する

version: 2021/11現在、3に設定
services: 連携したいコンテナを記述していく
services直下のkey名はなんでも良い



4. 
ubuntu環境で ModuleNotFoundError: No module named 'MySQLdb' が出た場合の対応

・apt-get update
・apt-get install build-essential python3-dev libmysqlclient-dev
・pip3 install mysqlclient 

参考サイト
https://instructobit.com/tutorial/104/Installing-MySQL-for-python-2-and-3-on-Ubuntu

root@d4b9d1121b3e:/# apt-get install build-essential python3-dev libmysqlclient-dev
Reading package lists... Done
Building dependency tree       
Reading state information... Done
python3-dev is already the newest version (3.8.2-0ubuntu2).
python3-dev set to manually installed.
build-essential is already the newest version (12.8ubuntu1.1).
build-essential set to manually installed.
The following additional packages will be installed:
  libmysqlclient21 libssl-dev mysql-common
Suggested packages:
  libssl-doc
The following NEW packages will be installed:
  libmysqlclient-dev libmysqlclient21 libssl-dev mysql-common
0 upgraded, 4 newly installed, 0 to remove and 0 not upgraded.
Need to get 4485 kB of archives.
After this operation, 25.8 MB of additional disk space will be used.
Do you want to continue? [Y/n] y
Get:1 http://archive.ubuntu.com/ubuntu focal/main amd64 mysql-common all 5.8+1.0.5ubuntu2 [7496 B]
Get:2 http://archive.ubuntu.com/ubuntu focal-updates/main amd64 libmysqlclient21 amd64 8.0.27-0ubuntu0.20.04.1 [1291 kB]
Get:3 http://archive.ubuntu.com/ubuntu focal-updates/main amd64 libssl-dev amd64 1.1.1f-1ubuntu2.9 [1583 kB]                               
Get:4 http://archive.ubuntu.com/ubuntu focal-updates/main amd64 libmysqlclient-dev amd64 8.0.27-0ubuntu0.20.04.1 [1603 kB]                 
Fetched 4485 kB in 12s (388 kB/s)                                                                                                          
debconf: delaying package configuration, since apt-utils is not installed
Selecting previously unselected package mysql-common.
(Reading database ... 14378 files and directories currently installed.)
Preparing to unpack .../mysql-common_5.8+1.0.5ubuntu2_all.deb ...
Unpacking mysql-common (5.8+1.0.5ubuntu2) ...
Selecting previously unselected package libmysqlclient21:amd64.
Preparing to unpack .../libmysqlclient21_8.0.27-0ubuntu0.20.04.1_amd64.deb ...
Unpacking libmysqlclient21:amd64 (8.0.27-0ubuntu0.20.04.1) ...
Selecting previously unselected package libssl-dev:amd64.
Preparing to unpack .../libssl-dev_1.1.1f-1ubuntu2.9_amd64.deb ...
Unpacking libssl-dev:amd64 (1.1.1f-1ubuntu2.9) ...
Selecting previously unselected package libmysqlclient-dev.
Preparing to unpack .../libmysqlclient-dev_8.0.27-0ubuntu0.20.04.1_amd64.deb ...
Unpacking libmysqlclient-dev (8.0.27-0ubuntu0.20.04.1) ...
Setting up mysql-common (5.8+1.0.5ubuntu2) ...
update-alternatives: using /etc/mysql/my.cnf.fallback to provide /etc/mysql/my.cnf (my.cnf) in auto mode
Setting up libmysqlclient21:amd64 (8.0.27-0ubuntu0.20.04.1) ...
Setting up libssl-dev:amd64 (1.1.1f-1ubuntu2.9) ...
Setting up libmysqlclient-dev (8.0.27-0ubuntu0.20.04.1) ...
Processing triggers for libc-bin (2.31-0ubuntu9.2) ...
root@d4b9d1121b3e:/# 
root@d4b9d1121b3e:/# 
root@d4b9d1121b3e:/# pip3 install mysqlclient
Collecting mysqlclient
  Using cached mysqlclient-2.1.0.tar.gz (87 kB)
Building wheels for collected packages: mysqlclient
  Building wheel for mysqlclient (setup.py) ... done
  Created wheel for mysqlclient: filename=mysqlclient-2.1.0-cp38-cp38-linux_x86_64.whl size=109141 sha256=01141726a40a064273fbac4c8c3868574f2ce6f1a5965a70b06b016fb9fc3f49
  Stored in directory: /root/.cache/pip/wheels/61/e7/42/9d56347e42d7ce19397c0ca050c6bef56640e18be7021ac189
Successfully built mysqlclient
Installing collected packages: mysqlclient
Successfully installed mysqlclient-2.1.0



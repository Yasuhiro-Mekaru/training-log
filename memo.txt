1. SessionとCookieについて

前提: HTTPはステートレスなプロトコルなので状態を保持しない。
　　　状態を保持しないとは、リクエスト・レスポンスが終わった後、サーバーはクライアントの情報を保持しないこと。
　　　クライアントからサーバーへリクエストした際の情報は全て無くなるので、再度リクエストする時、また情報を渡してあげなければならない。
　　　この状態の場合、ページ遷移をする場合やログインしてサイトを使用するような場合に、ページ遷移毎にユーザー情報を引き渡してあげなければならずセキュリティー的に良くない。
　　　このHTTPのステートレスな状態をステートフルな状態にするための技術がSessionやCookie。


webサイトにログインできる仕組み
1. クライアントからサーバーへリクエストが送られる。
2. クライアントがアプリでログインする。
3. サーバーはクライアントのsessionIDを作成する。
4. サーバーからクライアントへレスポンスを送る際、3で作成したsessionIDを送る。
5. クライアントはサーバーから受け取ったsessionIDをサーバー情報と共にCookieとしてブラウザに保存する。
6. クライアントは再度サーバーへリクエストを送る時、5で作成したCookie情報も送る。
7. サーバーはクライアントから受け取ったCookie情報からsessionIDを取り出し、ユーザー情報を復元する。

Cookie: サーバーから送られて来たsessionIDとサーバー情報
Session: クライアント・サーバー間でやりとりされる一連の動作

HTTPのステートレスな性質を克服するために生まれた仕組みがCookieやSession




2. Gitの使い方

新しくブランチを作成する
$ git checkout -b <branch name>


ブランチを変更する
$git branch <branch name>
変更する前にファイル類は閉じておく → 変更後のブランチで保存したら反映されてしまう


現在のブランチを確認する
$ git branch
* dev_ver1
  master
*がついているのが現在作業中のブランチ


repositoryの状態を確認する
$ git status


repositoryの変更をStaging Areaにあげる
$ git add <file name>
<file name>の箇所を .「ドット」で指定するとカレントディレクトリ配下全てを指定できる


Staging Areaの変更ぶんをコミットする
$ git commit -m 'comment'
コミットする際は必ず -mオプションでコメントをつけなければならない


logを確認する
$ git log
logファイル表示状態から戻るときは Q をクリック

remote repositoryを確認する
$ git remote -v








3. docker-composeの使い方

docker-compose.ymlサンプル

version: '3'

services: 

  flask:
    build: ./flask
    container_name: flask
    command: flask run -h 0.0.0.0 -p 5000
    volumes:
      - ./flask:/work/
    ports:
      - 5000:5000
    links:
      - database
    # tty: true

  database:
    build: ./mysql
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: test_training_log
      MYSQL_USER: admin
      MYSQL_PASSWORD: password
      TZ: 'Asia/Tokyo'
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_bin
    volumes:
      - ./mysql/data:/var/lib/mysql
      - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf
      - ./mysql/sql:/docker-entrypoint-initdb.d
      - ./mysql/log:/var/log/mysql
    ports:
      - 3306:3306

書き方
yamlファイルの書き方に準ずる。
データはkey,value方式で、jsonのような入れ子構造で保管する

version: 2021/11現在、3に設定
services: 連携したいコンテナを記述していく
services直下のkey名はなんでも良い


